"use client";

import React, { useState, useEffect, useRef } from "react";
import { sendRequest } from "@/utils/api";
import Image from "next/image";
import Link from "next/link";
import { Play, Pause, BarChart, ChevronLeft, ChevronRight, Clock, HeadphonesIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { usePlayer } from "@/components/app/player-context";

// Same interfaces as before
interface User {
  _id: string;
  name?: string;
  username: string;
  profilePicture?: string;
}

interface Track {
  _id: string;
  title: string;
  audioUrl: string;
  visibility: string;
  userId: string;
  user: User;
  artist?: string;
  coverImage?: string;
  cover?: string;
  duration: number;
  uploadDate: string;
  playCount?: number;
  likeCount?: number;
  commentCount?: number;
  genre?: string;
}

const HomePage = () => {
  const [featuredSongs, setFeaturedSongs] = useState<Track[]>([]);
  const [trendingSongs, setTrendingSongs] = useState<Track[]>([]);
  const [recentSongs, setRecentSongs] = useState<Track[]>([]);
  const [genreSongs, setGenreSongs] = useState<Track[]>([]);
  const [forYouSongs, setForYouSongs] = useState<Track[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [imageErrors, setImageErrors] = useState<{ [key: string]: boolean }>({});
  const { playTrack, currentTrack, isPlaying, togglePlayPause } = usePlayer();
  const carouselRef = useRef<HTMLDivElement>(null);
  const [currentSlide, setCurrentSlide] = useState(0);
  const [selectedGenre, setSelectedGenre] = useState<string>("Pop");
  const genres = ["Pop", "Rock", "Hip Hop", "Electronic", "Jazz", "Classical", "R&B"];

  useEffect(() => {
    fetchTrendingSongs();
    fetchRecentSongs();
    fetchFeaturedSongs();
    fetchGenreSongs(selectedGenre); // Fetch default genre songs
    fetchForYouSongs(); // Fetch personalized recommendations
  }, []);

  const fetchFeaturedSongs = async () => {
    try {
      const response = await sendRequest<any>({
        url: `${process.env.NEXT_PUBLIC_API_URL}/songs/search?sort=popular&order=desc&limit=5&visibility=PUBLIC`,
        method: "GET",
      });

      if (response.data) {
        // Get the top 5 songs with the highest play counts
        setFeaturedSongs(response.data.data || []);
      }
    } catch (error) {
      console.error("Error fetching featured songs:", error);
    }
  };

  const fetchTrendingSongs = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await sendRequest<any>({
        url: `${process.env.NEXT_PUBLIC_API_URL}/songs/search?sort=popular&order=desc&limit=6&visibility=PUBLIC`,
        method: "GET",
      });

      if (response.data) {
        setTrendingSongs(response.data.data || []);
      }
    } catch (error) {
      console.error("Error fetching trending songs:", error);
      setError("Failed to load trending songs. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  const fetchRecentSongs = async () => {
    try {
      const response = await sendRequest<any>({
        url: `${process.env.NEXT_PUBLIC_API_URL}/songs/search?sort=newest&order=desc&limit=6&visibility=PUBLIC`,
        method: "GET",
      });

      if (response.data) {
        setRecentSongs(response.data.data || []);
      }
    } catch (error) {
      console.error("Error fetching recent songs:", error);
    }
  };
  
  const fetchGenreSongs = async (genre: string) => {
    try {
      setSelectedGenre(genre);
      const response = await sendRequest<any>({
        url: `${process.env.NEXT_PUBLIC_API_URL}/songs/search?genre=${encodeURIComponent(genre)}&limit=6&visibility=PUBLIC`,
        method: "GET",
      });

      if (response.data) {
        setGenreSongs(response.data.data || []);
      }
    } catch (error) {
      console.error(`Error fetching ${genre} songs:`, error);
    }
  };
  
  const fetchForYouSongs = async () => {
    try {
      // Fetch a mix of songs from different genres to create a personalized feel
      // In a real app, this would use a recommendation algorithm
      const response = await sendRequest<any>({
        url: `${process.env.NEXT_PUBLIC_API_URL}/songs/search?sort=popular&order=desc&limit=6&visibility=PUBLIC`,
        method: "GET",
      });

      if (response.data) {
        setForYouSongs(response.data.data || []);
      }
    } catch (error) {
      console.error("Error fetching personalized songs:", error);
    }
  };

  const handlePlayTrack = (track: Track) => {
    if (playTrack) {
      const audioUrl = track.audioUrl.startsWith("/api/audio")
        ? track.audioUrl
        : `/api/audio?url=${encodeURIComponent(track.audioUrl)}`;

      playTrack({
        ...track,
        audioUrl,
      });
    }
  };

  const handlePlayToggle = (track: Track) => {
    if (currentTrack?._id === track._id) {
      togglePlayPause();
    } else {
      handlePlayTrack(track);
    }
  };

  const formatDuration = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  };

  // Helper to get the most appropriate cover image URL
  const getCoverImage = (track: Track) => {
    return track.coverImage || track.cover || "/default-profile.jpg";
  };

  // Handle image loading errors
  const handleImageError = (trackId: string) => {
    setImageErrors((prev) => ({ ...prev, [trackId]: true }));
  };

  // Carousel navigation
  const slideLeft = () => {
    if (carouselRef.current) {
      const newSlide = Math.max(0, currentSlide - 1);
      setCurrentSlide(newSlide);
      carouselRef.current.scrollTo({
        left: newSlide * carouselRef.current.offsetWidth,
        behavior: "smooth",
      });
    }
  };

  const slideRight = () => {
    if (carouselRef.current && featuredSongs.length > 0) {
      const newSlide = Math.min(featuredSongs.length - 1, currentSlide + 1);
      setCurrentSlide(newSlide);
      carouselRef.current.scrollTo({
        left: newSlide * carouselRef.current.offsetWidth,
        behavior: "smooth",
      });
    }
  };

  // Format a number with commas for better readability
  const formatNumber = (num: number) => {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };

  return (
    <div className="px-4 py-8 md:px-6 lg:px-8">
      {/* Featured Songs Carousel */}
      {featuredSongs.length > 0 && (
        <div className="mb-16 relative">
          <h2 className="text-2xl font-bold mb-6 flex items-center">
            <HeadphonesIcon className="mr-2 text-purple-500" size={24} />
            Featured Songs
          </h2>
          
          <div className="relative group">
            <div
              ref={carouselRef}
              className="flex overflow-hidden scroll-smooth rounded-2xl relative"
              style={{ scrollSnapType: "x mandatory" }}
            >
              {featuredSongs.map((song, index) => (
                <div
                  key={song._id}
                  className="min-w-full h-96 relative flex-shrink-0 scroll-snap-align-start"
                  style={{ scrollSnapAlign: "start" }}
                >
                  {/* Background image with overlay */}
                  <div className="absolute inset-0 bg-gradient-to-r from-gray-900/80 via-gray-900/60 to-gray-900/30 z-10" />
                  <div className="absolute inset-0 overflow-hidden">
                    <Image
                      src={!imageErrors[song._id] ? getCoverImage(song) : "/default-profile.jpg"}
                      alt={song.title}
                      fill
                      className="object-cover blur-sm scale-110 transform transition-transform"
                      quality={80}
                      onError={() => handleImageError(song._id)}
                    />
                  </div>
                  
                  {/* Song content */}
                  <div className="absolute inset-0 z-20 flex items-center">
                    <div className="container mx-auto px-4 md:px-8 flex flex-col md:flex-row items-center md:items-start gap-8">
                      {/* Album cover */}
                      <div className="relative w-48 h-48 md:w-64 md:h-64 flex-shrink-0 shadow-2xl rounded-lg overflow-hidden border-2 border-white/10">
                        <Image
                          src={!imageErrors[song._id] ? getCoverImage(song) : "/default-profile.jpg"}
                          alt={song.title}
                          fill
                          className="object-cover"
                          quality={100}
                          onError={() => handleImageError(song._id)}
                        />
                      </div>
                      
                      {/* Song details */}
                      <div className="flex flex-col text-white max-w-xl text-center md:text-left">
                        <h3 className="text-3xl md:text-4xl font-bold mb-2">{song.title}</h3>
                        <Link 
                          href={`/profile/${song.user?._id}`}
                          className="text-xl md:text-2xl text-white/80 hover:text-white transition mb-4"
                        >
                          {song.user?.name || song.user?.username || song.artist || "Unknown Artist"}
                        </Link>
                        
                        <div className="flex flex-wrap gap-4 mb-6 justify-center md:justify-start">
                          <div className="flex items-center bg-white/10 px-4 py-2 rounded-full backdrop-blur-md">
                            <Clock className="w-4 h-4 mr-2" />
                            {formatDuration(song.duration || 0)}
                          </div>
                          <div className="flex items-center bg-white/10 px-4 py-2 rounded-full backdrop-blur-md">
                            <BarChart className="w-4 h-4 mr-2" />
                            {formatNumber(song.playCount || 0)} plays
                          </div>
                          {song.genre && (
                            <div className="bg-white/10 px-4 py-2 rounded-full backdrop-blur-md">
                              {song.genre}
                            </div>
                          )}
                        </div>
                        
                        <Button 
                          onClick={() => handlePlayToggle(song)}
                          className="mt-4 bg-purple-600 hover:bg-purple-700 text-white px-8 py-6 text-lg rounded-full w-fit mx-auto md:mx-0"
                        >
                          {currentTrack?._id === song._id && isPlaying ? (
                            <><Pause className="mr-2" size={18} /> Pause</>
                          ) : (
                            <><Play className="mr-2" size={18} fill="white" /> Play Song</>
                          )}
                        </Button>
                      </div>
                    </div>
                  </div>
                  
                  {/* Slide indicator */}
                  <div className="absolute bottom-4 left-0 right-0 flex justify-center gap-2 z-30">
                    {featuredSongs.map((_, i) => (
                      <button
                        key={i}
                        onClick={() => {
                          setCurrentSlide(i);
                          carouselRef.current?.scrollTo({
                            left: i * carouselRef.current.offsetWidth,
                            behavior: "smooth",
                          });
                        }}
                        className={`w-2 h-2 rounded-full transition-all ${
                          currentSlide === i 
                            ? "bg-white w-4" 
                            : "bg-white/40 hover:bg-white/60"
                        }`}
                        aria-label={`Go to slide ${i + 1}`}
                      />
                    ))}
                  </div>
                </div>
              ))}
            </div>
            
            {/* Navigation arrows */}
            <button
              onClick={slideLeft}
              className="absolute left-2 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/60 text-white p-3 rounded-full z-20 opacity-0 group-hover:opacity-100 transition-opacity"
              aria-label="Previous slide"
              disabled={currentSlide === 0}
            >
              <ChevronLeft size={24} />
            </button>
            <button
              onClick={slideRight}
              className="absolute right-2 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/60 text-white p-3 rounded-full z-20 opacity-0 group-hover:opacity-100 transition-opacity"
              aria-label="Next slide"
              disabled={currentSlide === featuredSongs.length - 1}
            >
              <ChevronRight size={24} />
            </button>
          </div>
        </div>
      )}

      {/* Hero section with decorative elements */}
      <div className="relative w-full h-64 md:h-80 mb-12 rounded-2xl overflow-hidden shadow-lg">
        <div className="absolute inset-0 bg-gradient-to-r from-indigo-800/90 to-purple-800/90" />
        <img
          src="/pattern.png"
          alt=""
          className="absolute inset-0 w-full h-full object-cover mix-blend-overlay opacity-20"
        />
        
        <div className="absolute top-0 right-0 w-40 md:w-60 h-full">
          <img
            src="/waveform.png"
            alt=""
            className="h-full object-contain object-right opacity-30"
          />
        </div>
        
        <div className="relative z-10 flex flex-col items-center md:items-start justify-center h-full text-white p-8">
          <h1 className="text-4xl md:text-5xl font-extrabold mb-3 text-center md:text-left drop-shadow-md">
            Discover New Music
          </h1>
          <p className="text-lg md:text-xl text-center md:text-left max-w-md mb-6 drop-shadow">
            Listen to the most trending songs and recent uploads
          </p>
          <Button
            onClick={() => window.scrollTo({ top: window.innerHeight, behavior: "smooth" })}
            className="bg-white text-purple-900 hover:bg-purple-100 drop-shadow-lg"
          >
            Explore Now
          </Button>
        </div>
      </div>

      {/* For You Section - Personalized Recommendations */}
      <section className="mb-12 py-6 px-5 bg-gradient-to-br from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20 rounded-2xl border border-purple-100 dark:border-purple-900/50">
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center gap-2">
            <HeadphonesIcon className="h-5 w-5 text-purple-600" />
            <h2 className="text-2xl font-bold">For You</h2>
          </div>
          <Link href="/discover" className="text-purple-600 hover:underline">
            View More
          </Link>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {forYouSongs.map((track) => (
            <div
              key={track._id}
              className="group bg-white dark:bg-gray-800/50 rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 border border-gray-200 dark:border-gray-700"
            >
              <div className="relative aspect-video w-full">
                <Image
                  src={!imageErrors[track._id] ? getCoverImage(track) : "/default-profile.jpg"}
                  alt={track.title}
                  fill
                  className="object-cover transition-transform group-hover:scale-105"
                  onError={() => handleImageError(track._id)}
                />
                <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity" />
                <button
                  onClick={() => handlePlayToggle(track)}
                  className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 text-purple-600 p-3 rounded-full shadow-lg opacity-0 group-hover:opacity-100 transition-opacity"
                >
                  {currentTrack?._id === track._id && isPlaying ? (
                    <Pause size={20} />
                  ) : (
                    <Play size={20} fill="none" />
                  )}
                </button>
                <div className="absolute bottom-0 right-0 bg-black/70 text-white text-xs px-2 py-1 rounded-tl-md">
                  {formatDuration(track.duration || 0)}
                </div>
                {track.playCount && track.playCount > 0 && (
                  <div className="absolute top-0 right-0 bg-purple-600/90 text-white text-xs px-2 py-1 rounded-bl-md flex items-center gap-1">
                    <BarChart size={12} />
                    {formatNumber(track.playCount)}
                  </div>
                )}
              </div>
              <div className="p-4">
                <h3 className="font-bold truncate">{track.title}</h3>
                <Link href={`/profile/${track.user?._id}`} className="text-sm text-gray-600 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 truncate block">
                  {track.user?.name || track.user?.username || track.artist || "Unknown Artist"}
                </Link>
              </div>
            </div>
          ))}
        </div>
      </section>

      {/* Trending Songs Section */}
      <section className="mb-12">
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center gap-2">
            <BarChart className="h-5 w-5 text-purple-600" />
            <h2 className="text-2xl font-bold">Trending Songs</h2>
          </div>
          <Link href="/discover" className="text-purple-600 hover:underline">
            View All
          </Link>
        </div>

        {loading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, i) => (
              <div 
                key={i} 
                className="bg-gray-100 dark:bg-gray-800 animate-pulse rounded-xl h-64"
              />
            ))}
          </div>
        ) : error ? (
          <div className="p-4 bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-200 rounded-lg">
            {error}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {trendingSongs.map((track) => (
              <div
                key={track._id}
                className="group bg-white dark:bg-gray-800/50 rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 border border-gray-200 dark:border-gray-700"
              >
                <div className="relative aspect-video w-full">
                  <Image
                    src={!imageErrors[track._id] ? getCoverImage(track) : "/default-profile.jpg"}
                    alt={track.title}
                    fill
                    className="object-cover transition-transform group-hover:scale-105"
                    onError={() => handleImageError(track._id)}
                  />
                  <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity" />
                  <button
                    onClick={() => handlePlayToggle(track)}
                    className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 text-purple-600 p-3 rounded-full shadow-lg opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    {currentTrack?._id === track._id && isPlaying ? (
                      <Pause size={20} />
                    ) : (
                      <Play size={20} fill="none" />
                    )}
                  </button>
                  <div className="absolute bottom-0 right-0 bg-black/70 text-white text-xs px-2 py-1 rounded-tl-md">
                    {formatDuration(track.duration || 0)}
                  </div>
                  {track.playCount && track.playCount > 0 && (
                    <div className="absolute top-0 right-0 bg-purple-600/90 text-white text-xs px-2 py-1 rounded-bl-md flex items-center gap-1">
                      <BarChart size={12} />
                      {formatNumber(track.playCount)}
                    </div>
                  )}
                </div>
                <div className="p-4">
                  <h3 className="font-bold truncate">{track.title}</h3>
                  <Link href={`/profile/${track.user?._id}`} className="text-sm text-gray-600 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 truncate block">
                    {track.user?.name || track.user?.username || track.artist || "Unknown Artist"}
                  </Link>
                </div>
              </div>
            ))}
          </div>
        )}
      </section>      

      {/* Genre-Based Recommendations Section */}
      <section className="mb-12">
        <div className="flex flex-col mb-6">
          <h2 className="text-2xl font-bold mb-4">Browse by Genre</h2>
          <div className="flex flex-wrap gap-2 mb-6">
            {genres.map((genre) => (
              <button
                key={genre}
                onClick={() => fetchGenreSongs(genre)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                  selectedGenre === genre
                    ? "bg-purple-600 text-white"
                    : "bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"
                }`}
              >
                {genre}
              </button>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {genreSongs.length > 0 ? (
            genreSongs.map((track) => (
              <div
                key={track._id}
                className="group bg-white dark:bg-gray-800/50 rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 border border-gray-200 dark:border-gray-700"
              >
                <div className="relative aspect-video w-full">
                  <Image
                    src={!imageErrors[track._id] ? getCoverImage(track) : "/default-profile.jpg"}
                    alt={track.title}
                    fill
                    className="object-cover transition-transform group-hover:scale-105"
                    onError={() => handleImageError(track._id)}
                  />
                  <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity" />
                  <button
                    onClick={() => handlePlayToggle(track)}
                    className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 text-purple-600 p-3 rounded-full shadow-lg opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    {currentTrack?._id === track._id && isPlaying ? (
                      <Pause size={20} />
                    ) : (
                      <Play size={20} fill="none" />
                    )}
                  </button>
                  <div className="absolute bottom-0 right-0 bg-black/70 text-white text-xs px-2 py-1 rounded-tl-md">
                    {formatDuration(track.duration || 0)}
                  </div>
                  {track.playCount && track.playCount > 0 && (
                    <div className="absolute top-0 right-0 bg-purple-600/90 text-white text-xs px-2 py-1 rounded-bl-md flex items-center gap-1">
                      <BarChart size={12} />
                      {formatNumber(track.playCount)}
                    </div>
                  )}
                </div>
                <div className="p-4">
                  <h3 className="font-bold truncate">{track.title}</h3>
                  <Link href={`/profile/${track.user?._id}`} className="text-sm text-gray-600 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 truncate block">
                    {track.user?.name || track.user?.username || track.artist || "Unknown Artist"}
                  </Link>
                </div>
              </div>
            ))
          ) : (
            <div className="col-span-3 py-10 text-center text-gray-500 dark:text-gray-400">
              No songs found for {selectedGenre} genre
            </div>
          )}
        </div>
      </section>

      {/* Recent Uploads Section */}
      <section className="mb-12">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold">Recent Uploads</h2>
          <Link href="/discover" className="text-purple-600 hover:underline">
            View All
          </Link>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {recentSongs.map((track) => (
            <div
              key={track._id}
              className="group bg-white dark:bg-gray-800/50 rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 border border-gray-200 dark:border-gray-700"
            >
              <div className="relative aspect-video w-full">
                <Image
                  src={!imageErrors[track._id] ? getCoverImage(track) : "/default-profile.jpg"}
                  alt={track.title}
                  fill
                  className="object-cover transition-transform group-hover:scale-105"
                  onError={() => handleImageError(track._id)}
                />
                <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity" />
                <button
                  onClick={() => handlePlayToggle(track)}
                  className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 text-purple-600 p-3 rounded-full shadow-lg opacity-0 group-hover:opacity-100 transition-opacity"
                >
                  {currentTrack?._id === track._id && isPlaying ? (
                    <Pause size={20} />
                  ) : (
                    <Play size={20} fill="none" />
                  )}
                </button>
                <div className="absolute bottom-0 right-0 bg-black/70 text-white text-xs px-2 py-1 rounded-tl-md">
                  {formatDuration(track.duration || 0)}
                </div>
              </div>
              <div className="p-4">
                <h3 className="font-bold truncate">{track.title}</h3>
                <Link href={`/profile/${track.user?._id}`} className="text-sm text-gray-600 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 truncate block">
                  {track.user?.name || track.user?.username || track.artist || "Unknown Artist"}
                </Link>
              </div>
            </div>
          ))}
        </div>
      </section>
    </div>
  );
};

export default HomePage;
